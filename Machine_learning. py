import requests
import json
import io
import asyncio  # Import asyncio for handling async functions
from search import get_most_similar_question_answer  # Use ChromaDB search
from connection import nlp  # Use existing NLP model
from env import OLLAMA_API_BASE_URL, MODEL  # API Config

async def validate_data(incident_type, response):
    """Validates incident data using ChromaDB similarity search and calls an AI model."""
    isValid = False
    generated_text = ""
    response_text = ""

    # Get most similar incident using ChromaDB
    result = get_most_similar_question_answer(incident_type)

    # Ensure result is not a coroutine (if get_most_similar_question_answer is async, await it)
    if asyncio.iscoroutine(result):
        result = await result  # Await if needed

    similar_incident, similar_action_taken, similar_action_suggested, similarity_distance = result

    if similarity_distance > 15:  # Threshold for validation
        isValid = True
        context = f"Rewrite the response:\n{response}\nPrompt: {incident_type}"

        # Debugging output
        print(f"üîç Augmented Query:\n{context}")

        # Prepare request for AI model
        augmented_query = {
            "historical_incident": similar_incident,
            "historical_action_suggested": similar_action_suggested,
            "query": f"Rewrite the incident & action_suggested with context: {context}"
        }

        # Call Ollama API for text generation
        ollama_api_url = f"{OLLAMA_API_BASE_URL}/generate"
        ollama_payload = {
            "model": MODEL,
            "prompt": json.dumps(augmented_query),
            "temperature": 0.1,
            "max_tokens": 150,
            "num_return_sequences": 1,
            "stop": ["\n"]
        }

        # Sync request (requests is not async)
        r = requests.post(ollama_api_url, json=ollama_payload)

        if r.status_code == 200:
            r.raise_for_status()
            buffer = io.StringIO()

            for line in r.iter_lines():
                body = json.loads(line)
                response_part = body.get("response", "")
                response_text += str(response_part)
                buffer.write(response_part)
            buffer.flush()

    # Return final result
    return {
        "historical_similarities": similarity_distance,
        "generated_text": response_text,
        "isValid": isValid
    }

# ‚úÖ Properly calling the async function in a sync environment
if __name__ == "__main__":
    incident_type = "fire accident"
    response = "fire emergency response plan"

    # Fix: Ensure async function is awaited
    result = asyncio.run(validate_data(incident_type, response))

    print("üî• Incident Validation Result:")
    print(json.dumps(result, indent=4))