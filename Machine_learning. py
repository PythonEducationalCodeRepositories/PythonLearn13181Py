import streamlit as st
import os
from datetime import datetime
from typing import TypedDict, List, Union
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from langgraph.graph import StateGraph, START, END
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Import utilities
from utils.core import (
    ModelManager, generate_summary, extract_entities, format_entities_for_display,
    CHARACTER_PERSONAS, create_rag_chain, create_llm_with_agent
)
from utils.docs import extract_text_from_file
from utils.gen_files import create_pptx, create_pdf, create_chat_history_pdf
from utils.session import (
    initialize_session_state, get_current_session, create_new_session, 
    delete_session, display_chat
)

# Configuration from environment
API_KEY = os.getenv("API_KEY", "your-api-key-here")
BASE_URL = os.getenv("BASE_URL", "https://your-base-url-here")
CHAT_MODELS = os.getenv("CHAT_MODELS", "gpt-4o,gpt-4o-mini,gpt-4-turbo,gpt-4,gpt-3.5-turbo").split(",")
EMBEDDING_MODELS = os.getenv("EMBEDDING_MODELS", "text-embedding-ada-002,text-embedding-3-small").split(",")

# Configure Streamlit
st.set_page_config(page_title='RAG PDF Summarizer Chatbot', layout='wide')

# Initialize session state
initialize_session_state()

# Sidebar
with st.sidebar:
    # TEAM A BBSR branding
    st.markdown(
        "<h2 style='text-align:center; color:#004080; margin-bottom:0;'>TEAM A BBSR</h2>"
        "<h4 style='text-align:center; margin-top:2px;'>Multi-Document RAG Chatbot</h4><hr>",
        unsafe_allow_html=True,
    )
    
    st.title("AI Chat Assistant")
    
    # Model Selection
    st.subheader("Model Settings")
    if "selected_chat_model" not in st.session_state:
        st.session_state.selected_chat_model = CHAT_MODELS[0]
    if "selected_embedding_model" not in st.session_state:
        st.session_state.selected_embedding_model = EMBEDDING_MODELS[0]
    
    st.session_state.selected_chat_model = st.selectbox(
        "Chat Model:",
        CHAT_MODELS,
        index=CHAT_MODELS.index(st.session_state.selected_chat_model)
    )
    
    st.session_state.selected_embedding_model = st.selectbox(
        "Embedding Model:",
        EMBEDDING_MODELS,
        index=EMBEDDING_MODELS.index(st.session_state.selected_embedding_model)
    )
    
    # Model Parameters - Add sliders for tokens and temperature
    st.subheader("Model Parameters")
    
    # Initialize parameters if not exist
    if "max_tokens" not in st.session_state:
        st.session_state.max_tokens = 1000
    if "temperature" not in st.session_state:
        st.session_state.temperature = 0.7
    
    # Max Tokens Slider
    st.session_state.max_tokens = st.slider(
        "Max Tokens:",
        min_value=50,
        max_value=4000,
        value=st.session_state.max_tokens,
        step=50,
        help="Maximum number of tokens to generate"
    )
    
    # Temperature Slider
    st.session_state.temperature = st.slider(
        "Temperature:",
        min_value=0.0,
        max_value=2.0,
        value=st.session_state.temperature,
        step=0.1,
        help="Controls randomness: 0.0 = deterministic, 2.0 = very creative"
    )
    
    # Display current values
    st.caption(f"Current: {st.session_state.max_tokens} tokens, {st.session_state.temperature} temperature")
    
    # Character Selection
    st.subheader("Character Persona")
    current_session = get_current_session()
    selected_character = st.selectbox(
        "Select Character:",
        list(CHARACTER_PERSONAS.keys()),
        index=list(CHARACTER_PERSONAS.keys()).index(current_session.get("character", "Default Assistant"))
    )
    
    if current_session["character"] != selected_character:
        current_session["character"] = selected_character
        current_session["messages"][0] = SystemMessage(content=CHARACTER_PERSONAS[selected_character])
    
    st.divider()
    
    # Multi-Document Upload Section
    st.subheader("Document Upload")
    uploaded_files = st.file_uploader(
        "Upload Documents for Analysis (PDF/DOCX/TXT)", 
        type=["pdf", "docx", "txt"],
        accept_multiple_files=True,
        key="multifile"
    )
    
    if uploaded_files:
        if st.button("Process Documents"):
            create_new_session("document")
            current_session = get_current_session()
            current_session["pdf_name"] = ", ".join([f.name for f in uploaded_files])
            
            with st.spinner("Processing documents..."):
                try:
                    all_texts = []
                    all_entities = {}
                    
                    for file in uploaded_files:
                        file_type = file.name.split('.')[-1].lower()
                        text = extract_text_from_file(file, file_type)
                        all_texts.append(text)
                        
                        # NER per document
                        entities = extract_entities(text)
                        all_entities[file.name] = entities
                    
                    # Create RAG chain with all documents
                    rag_chain = create_rag_chain(
                        all_texts, 
                        API_KEY, 
                        BASE_URL,
                        st.session_state.selected_chat_model,
                        st.session_state.selected_embedding_model,
                        st.session_state.temperature,
                        st.session_state.max_tokens
                    )
                    
                    current_session["rag_chain"] = rag_chain
                    current_session["rag_ready"] = True
                    current_session["text_chunks"] = all_texts
                    current_session["all_doc_entities"] = all_entities
                    
                    st.success("All documents processed and cross-indexed successfully!")
                    st.rerun()
                except Exception as e:
                    st.error(f"Error processing documents: {str(e)}")
    
    # Document Actions (only show if document is loaded)
    current_session = get_current_session()
    if current_session.get("rag_ready", False):
        st.subheader("Document Actions")
        
        # Download format selection
        download_format = st.selectbox(
            "Download Format:",
            ["txt", "pdf", "pptx"],
            key="download_format"
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("Generate Summary"):
                with st.spinner("Generating summary..."):
                    character_persona = CHARACTER_PERSONAS[current_session["character"]]
                    summary = generate_summary(
                        current_session["text_chunks"], 
                        API_KEY,
                        BASE_URL,
                        st.session_state.selected_chat_model,
                        character_persona,
                        st.session_state.temperature,
                        st.session_state.max_tokens
                    )
                    
                    filename = current_session.get("pdf_name", "document")
                    filename = filename.replace(", ", "_").replace(".pdf", "").replace(".docx", "").replace(".txt", "")
                    
                    if download_format == "txt":
                        st.download_button(
                            label="Download TXT",
                            data=summary,
                            file_name=f"{filename}_summary.txt",
                            mime="text/plain"
                        )
                    elif download_format == "pdf":
                        pdf_data = create_pdf(summary, filename)
                        st.download_button(
                            label="Download PDF",
                            data=pdf_data,
                            file_name=f"{filename}_summary.pdf",
                            mime="application/pdf"
                        )
                    elif download_format == "pptx":
                        pptx_data = create_pptx(summary, filename)
                        st.download_button(
                            label="Download PPTX",
                            data=pptx_data,
                            file_name=f"{filename}_summary.pptx",
                            mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
                        )
        
        with col2:
            if st.button("Show NER"):
                if "show_ner" not in st.session_state:
                    st.session_state.show_ner = False
                st.session_state.show_ner = not st.session_state.show_ner
                st.rerun()
    
    st.divider()
    
    # Session Management
    st.subheader("Chat Sessions")
    
    # New Chat Button
    if st.button("New Chat"):
        create_new_session("chat")
        st.rerun()
    
    # Display sessions
    for session_id in list(st.session_state.chat_sessions.keys()):
        session = st.session_state.chat_sessions[session_id]
        session_type = "Document" if session.get("session_type") == "document" else "Chat"
        session_name = f"{session_type} - {session_id}"
        
        if session.get("pdf_name"):
            session_name = f"{session['pdf_name'][:15]}... - {session_id[-8:]}"
        
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            if st.button(
                session_name,
                key=f"session_{session_id}",
                type="primary" if session_id == st.session_state.current_session_id else "secondary"
            ):
                st.session_state.current_session_id = session_id
                st.rerun()
        
        with col2:
            # Chat history download button
            if len(session.get("messages", [])) > 1:  # More than just system message
                chat_pdf = create_chat_history_pdf(session["messages"], session_id[-8:])
                st.download_button(
                    label="D",
                    data=chat_pdf,
                    file_name=f"chat_history_{session_id[-8:]}.pdf",
                    mime="application/pdf",
                    key=f"download_chat_{session_id}",
                    help="Download chat history"
                )
        
        with col3:
            if st.button("X", key=f"delete_{session_id}", help="Delete session"):
                delete_session(session_id)
                st.rerun()
    
    # Clear All Chats
    if st.button("Clear All Chats"):
        st.session_state.chat_sessions = {}
        create_new_session("chat")
        st.rerun()

# Main Chat Interface
current_session = get_current_session()
session_type_icon = "Document" if current_session.get("session_type") == "document" else "Chat"

if current_session.get("pdf_name"):
    st.title(f"{session_type_icon} Chat - {current_session['pdf_name']}")
else:
    st.title(f"{session_type_icon} AI Chat Assistant")

# Display current model info and character
st.caption(f"Using: {st.session_state.selected_chat_model} | Character: {current_session.get('character', 'Default Assistant')} | Tokens: {st.session_state.max_tokens} | Temp: {st.session_state.temperature} | Session: {st.session_state.current_session_id[-8:]}")

# Display NER results in main page if requested (Multi-document support)
if st.session_state.get("show_ner", False) and current_session.get("all_doc_entities"):
    with st.container():
        st.markdown("### Named Entities Analysis per Document")
        for docname, entities in current_session["all_doc_entities"].items():
            st.markdown(f"**{docname}**")
            entity_display = format_entities_for_display(entities)
            st.markdown(entity_display)
        st.divider()
elif st.session_state.get("show_ner", False) and current_session.get("entities"):
    with st.container():
        st.markdown("### Named Entities Analysis")
        entity_display = format_entities_for_display(current_session["entities"])
        st.markdown(entity_display)
        st.divider()

# Display chat messages
display_chat(current_session.get("messages", []))

# Chat input
if current_session.get("rag_ready", False):
    prompt = st.chat_input("Ask a question about the uploaded document(s)...")
    if prompt:
        # Add character persona to the prompt
        character_context = CHARACTER_PERSONAS[current_session["character"]]
        enhanced_prompt = f"{character_context}\n\nUser question: {prompt}"
        
        # Add user message
        current_session["messages"].append(HumanMessage(content=prompt))
        st.chat_message("user").write(prompt)
        
        # Generate response
        with st.spinner("Thinking..."):
            try:
                result = current_session["rag_chain"].invoke(enhanced_prompt)
                answer = result["result"]
                current_session["messages"].append(AIMessage(content=answer))
                st.chat_message("assistant").write(answer)
                st.rerun()
            except Exception as e:
                error_msg = f"Error: {str(e)}"
                current_session["messages"].append(AIMessage(content=error_msg))
                st.chat_message("assistant").write(error_msg)
                st.rerun()

else:
    prompt = st.chat_input("Ask me anything...")
    if prompt:
        # Add user message
        current_session["messages"].append(HumanMessage(content=prompt))
        st.chat_message("user").write(prompt)
        
        # Generate response
        with st.spinner("Thinking..."):
            try:
                # Create LLM with agent
                response = create_llm_with_agent(
                    current_session["messages"].copy(),
                    API_KEY,
                    BASE_URL,
                    st.session_state.selected_chat_model,
                    CHARACTER_PERSONAS[current_session["character"]],
                    st.session_state.temperature,
                    st.session_state.max_tokens
                )
                
                current_session["messages"].append(AIMessage(content=response))
                st.chat_message("assistant").write(response)
                st.rerun()
                
            except Exception as e:
                error_msg = f"Error: {str(e)}"
                current_session["messages"].append(AIMessage(content=error_msg))
                st.chat_message("assistant").write(error_msg)
                st.rerun()
