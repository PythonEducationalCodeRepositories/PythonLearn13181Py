from connection import get_sentence_embedding, get_collection

def compare_incident(incident_type):
    """Find similar incidents by type and compare their similarity."""
    collection = get_collection()

    # Query incidents matching the given type
    results = collection.query(
        query_texts=[incident_type],
        n_results=5,  # Return top 5 most similar incidents
        include=["documents", "metadatas", "distances"]
    )

    similarities = []
    for i in range(len(results["documents"][0])):  # Ensure correct indexing
        incident_desc = results["documents"][0][i]  # First query result
        incident_metadata = results["metadatas"][0][i]  # Metadata of the document
        similarity_score = results["distances"][0][i]  # Similarity score

        similarities.append({
            "historical_incident": incident_desc,
            "similarity_distance": similarity_score,
            "suggested_action": incident_metadata.get("action_suggested", "No suggestion available")
        })

    return similarities

# Example usage:
if __name__ == "__main__":
    incident_type = "fire accident"
    similar_incidents = compare_incident(incident_type)

    for incident in similar_incidents:
        print(f"ðŸ”¥ Incident: {incident['historical_incident']}")
        print(f"ðŸ“Š Similarity Score: {incident['similarity_distance']:.4f}")
        print(f"âœ… Suggested Action: {incident['suggested_action']}")
        print("-" * 50)